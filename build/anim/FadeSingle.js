// Generated by CoffeeScript 1.8.0

/*
	Copyright 2014 Serious Mumbo, Inc.

	This file is part of ledscape-node.

	ledscape-node is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ledscape-node is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ledscape-node.  If not, see <http://www.gnu.org/licenses/>.
 */

(function() {
  var FadeSingle,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  FadeSingle = (function() {
    FadeSingle.prototype.config = {
      pixelsPerStrip: 64,
      numberOfStrips: 48,
      fps: 100,
      duration: 20,
      color: [255, 255, 255],
      brightness: 0.75
    };

    function FadeSingle(opts) {
      this.time2color = __bind(this.time2color, this);
      this.draw = __bind(this.draw, this);
      var key, val;
      for (key in opts) {
        val = opts[key];
        this.config[key] = val;
      }
      this.Ledscape = require("../ledscape");
      this.frame0 = true;
      this.Ledscape.init(this.config.pixelsPerStrip, this.config.numberOfStrips);
    }

    FadeSingle.prototype.fade = function(cb) {
      this.cb = cb;
      this.start = new Date().getTime();
      this.done = Math.round(this.config.duration * 1000);
      this.interval = Math.round(1000.0 / this.config.fps);
      this.timer = setInterval(this.draw, this.interval);
      return this.draw();
    };

    FadeSingle.prototype.draw = function() {
      var framenum, rgb, _ref, _ref1;
      rgb = this.time2color();
      if (!rgb) {
        return;
      }
      framenum = (_ref = this.frame0) != null ? _ref : {
        0: 1
      };
      (_ref1 = this.Ledscape).fillColor.apply(_ref1, [framenum].concat(__slice.call(rgb)));
      this.Ledscape.draw(framenum);
      return this.frame0 = !this.frame0;
    };

    FadeSingle.prototype.time2color = function() {
      var c, elapsed, ratio;
      elapsed = new Date().getTime() - this.start;
      if (elapsed >= this.done) {
        clearInterval(this.timer);
        this.cb();
        return false;
      }
      ratio = (1 - Math.cos(2 * Math.PI * (elapsed * 1.0) / (this.done * 1.0))) / 2;
      c = this.config.color;
      return [ratio * c[0] * this.config.brightness, ratio * c[1] * this.config.brightness, ratio * c[2] * this.config.brightness];
    };

    return FadeSingle;

  })();

  module.exports = FadeSingle;

}).call(this);
