// Generated by CoffeeScript 1.9.0
(function() {
  var Animation, color, ledscape, numpixels,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ledscape = require("../ledscape");

  color = require("color");

  numpixels = 24;

  Animation = (function() {
    Animation.prototype.config = {
      fps: 30,
      duration: 20,
      repeat: false,
      brightness: 0.2
    };

    function Animation(opts) {
      this.fill = __bind(this.fill, this);
      this.pixel = __bind(this.pixel, this);
      this.resume = __bind(this.resume, this);
      this.pause = __bind(this.pause, this);
      this.drawFrame = __bind(this.drawFrame, this);
      this.ledsOut = __bind(this.ledsOut, this);
      this.clear = __bind(this.clear, this);
      this.checkDone = __bind(this.checkDone, this);
      this.go = __bind(this.go, this);
      this.play = __bind(this.play, this);
      var f, key, p, val, _i, _j;
      this.dirty = [[], []];
      for (f = _i = 0; _i <= 1; f = ++_i) {
        for (p = _j = 0; 0 <= numpixels ? _j <= numpixels : _j >= numpixels; p = 0 <= numpixels ? ++_j : --_j) {
          this.dirty[f].push(true);
        }
      }
      for (key in opts) {
        val = opts[key];
        this.config[key] = val;
      }
      this.frame = 0;
      this.pixels = [];
      this.done = Math.round(this.config.duration * 1000);
      this.interval = Math.round(1000.0 / this.config.fps);
    }

    Animation.prototype.play = function(_at_cb) {
      this.cb = _at_cb;
      this.frame = 0;
      this.fill(color("black"));
      return this.go();
    };

    Animation.prototype.go = function() {
      this.start = new Date().getTime();
      this.timer = setInterval(this.drawFrame, this.interval);
      return this.drawFrame();
    };

    Animation.prototype.checkDone = function() {
      if (this.config.repeat) {
        this.play();
        return true;
      } else {
        clearInterval(this.timer);
        this.clear();
        setTimeout(((function(_this) {
          return function() {
            return typeof _this.cb === "function" ? _this.cb() : void 0;
          };
        })(this)), 100);
        return false;
      }
    };

    Animation.prototype.clear = function() {
      this.fill(color("black"));
      this.ledsOut();
      return this.ledsOut();
    };

    Animation.prototype.ledsOut = function() {
      var clr, p, rgb, _i, _ref;
      for (p = _i = 0, _ref = numpixels - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; p = 0 <= _ref ? ++_i : --_i) {
        rgb = this.pixels[p].rgb();
        if (this.dirty[this.frame][p]) {
          ledscape.setColorNoWait(this.frame, p, rgb.r, rgb.g, rgb.b);
          this.dirty[this.frame][p] = false;
        }
      }
      clr = this.pixels[numpixels - 1].clone().rgb();
      clr.r = Math.round(clr.b * this.config.brightness);
      clr.g = Math.round(clr.b * this.config.brightness);
      clr.b = Math.round(clr.b * this.config.brightness);
      ledscape.setColor(this.frame, numpixels - 1, clr.r, clr.g, clr.b);
      ledscape.draw(this.frame);
      if (this.frame === 0) {
        return this.frame = 1;
      } else {
        return this.frame = 0;
      }
    };

    Animation.prototype.drawFrame = function() {
      var dodraw, elapsed;
      elapsed = new Date().getTime() - this.start;
      if (elapsed >= this.done) {
        dodraw = this.checkDone();
      } else {
        dodraw = true;
      }
      if (dodraw) {
        this.draw(elapsed);
        return this.ledsOut();
      }
    };

    Animation.prototype.pause = function() {
      return clearInterval(this.timer);
    };

    Animation.prototype.resume = function() {
      return this.go();
    };

    Animation.prototype.pixel = function(n, color) {
      this.pixels[n] = color;
      this.dirty[0][n] = true;
      return this.dirty[1][n] = true;
    };

    Animation.prototype.fill = function(color) {
      var p, _i, _ref, _results;
      _results = [];
      for (p = _i = 0, _ref = numpixels - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; p = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.pixel(p, color));
      }
      return _results;
    };

    return Animation;

  })();

  module.exports = Animation;

}).call(this);
