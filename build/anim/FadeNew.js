// Generated by CoffeeScript 1.9.0
(function() {
  var FadeNew,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FadeNew = (function() {
    FadeNew.prototype.config = {
      pixelsPerStrip: 64,
      numberOfStrips: 48,
      fps: 40,
      duration: 65,
      color: [255, 255, 255],
      brightness: 0.5
    };

    function FadeNew(opts) {
      this.time2color = __bind(this.time2color, this);
      this.draw = __bind(this.draw, this);
      var key, val;
      for (key in opts) {
        val = opts[key];
        this.config[key] = val;
      }
      this.Ledscape = require("../ledscape");
      this.frame0 = true;
      this.Ledscape.init(this.config.pixelsPerStrip, this.config.numberOfStrips);
    }

    FadeNew.prototype.fade = function(_at_cb) {
      this.cb = _at_cb;
      this.strip = 0;
      this.pixel = 0;
      this.start = new Date().getTime();
      this.done = Math.round(this.config.duration * 1000);
      this.interval = Math.round(1000.0 / this.config.fps);
      this.timer = setInterval(this.draw, this.interval);
      return this.draw();
    };

    FadeNew.prototype.draw = function() {
      var framenum, rgb, _ref;
      rgb = this.time2color();
      if (!rgb) {
        return;
      }
      framenum = (_ref = this.frame0) != null ? _ref : {
        0: 1
      };
      this.pixel += 1;
      if (this.pixel === 24) {
        this.pixel = 0;
      }
      this.Ledscape.fillColorNoWait(0, 0, 0, 0);
      this.Ledscape.setColorNoWait(0, this.pixel, 0, 100, 0);
      this.Ledscape.setColorNoWait(0, this.pixel + 1, 0, 120, 0);
      this.Ledscape.setColor(0, this.pixel + 2, 0, 140, 0);
      this.Ledscape.draw(0);
      return this.frame0 = !this.frame0;
    };

    FadeNew.prototype.time2color = function() {
      var c, elapsed, ratio;
      elapsed = new Date().getTime() - this.start;
      if (elapsed >= this.done) {
        clearInterval(this.timer);
        this.cb();
        return false;
      }
      ratio = (1 - Math.cos(2 * Math.PI * (elapsed * 1.0) / (this.done * 1.0))) / 2;
      c = this.config.color;
      return [ratio * c[0] * this.config.brightness, ratio * c[1] * this.config.brightness, ratio * c[2] * this.config.brightness];
    };

    return FadeNew;

  })();

  module.exports = FadeNew;

}).call(this);
