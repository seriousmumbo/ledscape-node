// Generated by CoffeeScript 1.8.0

/*
	Copyright 2014 Serious Mumbo, Inc.

	This file is part of ledscape-node.

	ledscape-node is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	ledscape-node is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with ledscape-node.  If not, see <http://www.gnu.org/licenses/>.
 */

(function() {
  var Spinner,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  Spinner = (function() {
    Spinner.prototype.config = {
      cycleLength: 2,
      cycleCenterDivider: 4,
      totalSize: 24,
      numberOfStrips: 1,
      points: 1,
      backgroundColor: [0, 0, 0],
      color: [255, 255, 255],
      fps: 100
    };

    function Spinner(opts) {
      this.draw = __bind(this.draw, this);
      var key, val;
      for (key in opts) {
        val = opts[key];
        this.config[key] = val;
      }
      this.Ledscape = require("../ledscape");
      this.frame0 = true;
      this.Ledscape.init(this.config.totalSize, this.config.numberOfStrips);
    }

    Spinner.prototype.spin = function() {
      var _ref;
      this.start = new Date().getTime();
      (_ref = this.Ledscape).fillColor.apply(_ref, [0].concat(__slice.call(this.config.backgroundColor)));
      this.Ledscape.draw(0);
      this.interval = Math.floor(1000 * (1 / this.config.fps));
      return this.timer = setInterval(this.draw, this.interval);
    };

    Spinner.prototype.draw = function() {
      var framenum, _ref;
      if (this.frame0) {
        this.drawFrame();
      }
      this.frame0 = !this.frame0;
      framenum = (_ref = this.frame0) != null ? _ref : {
        0: 1
      };
      return this.Ledscape.draw(framenum);
    };

    Spinner.prototype.drawFrame = function() {
      var _ref, _ref1, _ref2, _ref3;
      (_ref = this.Ledscape).fillColorNoWait.apply(_ref, [1].concat(__slice.call(this.config.backgroundColor)));
      (_ref1 = this.Ledscape).setColorNoWait.apply(_ref1, [1, 1, this.position(this.config.cycleLength)].concat(__slice.call(this.config.color)));
      (_ref2 = this.Ledscape).setColorNoWait.apply(_ref2, [1, 1, this.position(this.config.cycleLength / 8)].concat(__slice.call(this.config.color)));
      return (_ref3 = this.Ledscape).setColor.apply(_ref3, [1, 1, this.position(this.config.cycleLength / 4)].concat(__slice.call(this.config.color)));
    };

    Spinner.prototype.position = function(offset) {
      var cycleTick, linearPosition, portionOfCycle, position, positionMultiplier, radianPosition, totalRadiansPerCycle;
      cycleTick = this.millis() + (offset * 1000) + (this.center()) % this.cycleLengthMillis();
      portionOfCycle = cycleTick / this.cycleLengthMillis();
      totalRadiansPerCycle = Math.PI / 2;
      radianPosition = portionOfCycle * totalRadiansPerCycle;
      linearPosition = Math.sin(radianPosition);
      positionMultiplier = this.config.totalSize;
      position = linearPosition * positionMultiplier;
      return Math.floor(position / this.config.points) * this.config.points;
    };

    Spinner.prototype.center = function() {
      return (this.millis() / this.config.cycleCenterDivider) % this.cycleLengthMillis();
    };

    Spinner.prototype.millis = function() {
      return new Date().getTime() - this.start;
    };

    Spinner.prototype.cycleLengthMillis = function() {
      return this.config.cycleLength * 1000;
    };

    return Spinner;

  })();

  module.exports = Spinner;

}).call(this);
